time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1)){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
plot(time_between_dates)
plot(time_between_dates, pch = 8)
plot(time_between_dates, pch = 8, col = 'red')
plot(time_between_dates, pch = 8, col = 'red', ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
boxplot(time_between_dates)
hist(time_between_dates)
hist(time_between_dates, breaks = 10)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
number_persons = length(persons)
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
time_between_dates = seq(number_dates-1)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
Relaciones = date.frame(persons, dates)
Relaciones = date.frame(persons, dates)
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = date.frame(persons, dates)
Relaciones = data.frame(persons, dates)
Relaciones
summary(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
str(Relaciones)
summary(Relaciones)
rownames(Relaciones) <- Relaciones$persons
rownames(Relaciones) <- Relaciones$persons
row.names(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
row.names(Relaciones) <- Relaciones$persons
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
Relaciones
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
Relaciones
summary(Relaciones)
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10", "2017-11-24")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv', stringsAsFactors = FALSE)
full_model <- bind_rows(train, test)
str(full_model)
summary(full_model)
print(full_model$Name)
library(RODBC)
install.packages('RODBC')
install.packages("ImportExport")
library(ImportExport)
install.packages('RODBC')
library(RODBC)
library(ODBC)
install.packages('ODBC')
y
bd<-odbcConnectAccess("bd1.mdb")
setwd("~/Documents/Programación/GIT/R-Notebook-s")
Cannabis <- read.csv('Cannabis.csv')
XTC <- read.csv('XTC.csv')
Controles <- read.csv('Controles.csv')
head(Cannabis, 3)
head(XTC, 3)
XTC$id <- NULL
Cannabis$Group <- 'Cannabis'
XTC$Group <- 'XTC'
Controles$Group <- 'Control'
temporal <- rbind.data.frame(XTC, Cannabis)
Datos <- rbind(temporal, Controles)
head(Datos)
library(dplyr)
library(dplyr)
arrange(Datos, Group, vol)
summary(Datos)
length(Datos$vol)
print('Acabar esta puta sección')
Datos$sex[which(Datos$sex == 1)] <- 'Male'
Datos$sex[which(Datos$sex == 2)] <- 'Female'
head(Datos)
Datos$sex <- as.factor(Datos$sex)
Datos$sex <- as.factor(Datos$sex)
Datos$intervalos <- cut(Datos$age, breaks = c( min(Datos$age), 21, 25, max(Datos$age) ), labels = c('<= 21', '22-24', '>= 25' ))
Datos$age
Datos$intervalos
Datos$Corcub <- scale(Datos$corcub)
print(round(mean(Datos$Corcub, na.rm = TRUE), 3) == 0)
Datos$Sdmttoco <- scale(Datos$sdmttoco)
print(round(mean(Datos$Sdmttoco , na.rm = TRUE), 3) == 0)
Datos$Lnsscore <- scale(Datos$lnsscore)
print(round(sd(Datos$Lnsscore, na.rm = TRUE), 3 ) == 1)
print(round(mean(Datos$Waisvocd , na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Waisvocd , na.rm = TRUE), 3 ) == 1)
print(round(sd(Datos$Waisvocd , na.rm = TRUE), 3 ) == 1)
print(round(mean(Datos$Waisvocd , na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Waisvocd , na.rm = TRUE), 3 ) == 1)
Datos$Waisvocd <- scale(Datos$waisvocd)
print(round(mean(Datos$Waisvocd , na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Waisvocd , na.rm = TRUE), 3 ) == 1)
Datos$Corcub <- scale(Datos$corcub)
print(round(mean(Datos$Corcub, na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Corcub, na.rm = TRUE), 3 ) == 1)
Datos$Sdmttoco <- scale(Datos$sdmttoco)
print(round(mean(Datos$Sdmttoco , na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Sdmttoco , na.rm = TRUE), 3 ) == 1)
Datos$Lnsscore <- scale(Datos$lnsscore)
print(round(mean(Datos$Lnsscore, na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Lnsscore, na.rm = TRUE), 3 ) == 1)
Datos$Waisvocd <- scale(Datos$waisvocd)
print(round(mean(Datos$Waisvocd , na.rm = TRUE), 3) == 0)
print(round(sd(Datos$Waisvocd , na.rm = TRUE), 3 ) == 1)
Datos$CV <- Datos$Corcub + Datos$Sdmttoco + Datos$Lnsscore + Datos$Waisvocd
print(summary(Datos$CV))
print(mean(Datos$CV, na.rm = TRUE))
print(sd(Datos$CV, na.rm = TRUE))
print(mean(Datos$CV[which(Datos$intervalos == '<= 21')], na.rm = TRUE))
print(median(Datos$CV[which(Datos$intervalos == '<= 21')], na.rm = TRUE))
print(sd(Datos$CV[which(Datos$intervalos == '<= 21')], na.rm = TRUE))
print(IQR(Datos$CV[which(Datos$intervalos == '<= 21')], na.rm = TRUE))
print(mean(Datos$CV[which(Datos$intervalos == '22-24')], na.rm = TRUE))
print(median(Datos$CV[which(Datos$intervalos == '22-24')], na.rm = TRUE))
print(sd(Datos$CV[which(Datos$intervalos == '22-24')], na.rm = TRUE))
print(IQR(Datos$CV[which(Datos$intervalos == '22-24')], na.rm = TRUE))
print(mean(Datos$CV[which(Datos$intervalos == '>= 25')], na.rm = TRUE))
print(median(Datos$CV[which(Datos$intervalos == '>= 25')], na.rm = TRUE))
print(IQR(Datos$CV[which(Datos$intervalos == '>= 25')], na.rm = TRUE))
tabla1
tabla1 <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tabla1
tableCon <- table(Datos$age[which(Datos$Group == 'Controles')] == 'Controles')
tableXTC <- table(Datos$age[which(Datos$Group == 'XTX')], dnn = 'XTC')
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tableXTC <- table(Datos$age[which(Datos$Group == 'XTX')], dnn = 'XTC')
tableCon <- table(Datos$age[which(Datos$Group == 'Controles')] == 'Controles')
print(tableCan)
<-
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tableXTC <- table(Datos$age[which(Datos$Group == 'XTX')], dnn = 'XTC')
tableCon <- table(Datos$age[which(Datos$Group == 'Controles')] == 'Controles')
print(tableCan)
print(tableXTC)
print(tableCon)
print(tableCon)
print(tableCon)
print(tableXTC)
print(tableCon)
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
print(tableCan)
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tablaXTC <- table(Datos$age[which(Datos$Group == 'XTX')], dnn = 'XTC')
tablaCon <- table(Datos$age[which(Datos$Group == 'Controles')] == 'Controles')
print(tablaCan)
print(tablaXTC)
print(tablaCon)
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tablaXTC <- table(Datos$age[which(Datos$Group == 'XTC')], dnn = 'XTC')
tablaCon <- table(Datos$age[which(Datos$Group == 'Control')] == 'Control')
print(tablaCan)
print(tablaXTC)
print(tablaCon)
Datos$age[which(Datos$Group == 'Control')]
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tablaXTC <- table(Datos$age[which(Datos$Group == 'XTC')], dnn = 'XTC')
tablaCon <- table(Datos$age[which(Datos$Group == 'Control')], dnn == 'Control')
tablaCan <- table(Datos$age[which(Datos$Group == 'Cannabis')], dnn = 'Cannabis')
tablaXTC <- table(Datos$age[which(Datos$Group == 'XTC')], dnn = 'XTC')
tablaCon <- table(Datos$age[which(Datos$Group == 'Control')], dnn = 'Control')
print(tablaCan)
print(tablaXTC)
print(tablaCon)
mosaicplot(tablaCan)(tablaCan)
mosaicplot(tablaCan)(tablaCan)
mosaicplot(tablaCan)(tablaCan)
mosaicplot(tablaCon)(tablaCon)
mosaicplot(tablaXTC)(tablaXTC)
library(descr)
install.packages('descr')
library(descr)
cosstab(Datos$age, Datos$Group)
library(descr)
cosstab(Datos$age, Datos$Group)
CrossTable(Datos$age, Datos$Group)
library(xlsx)
library(xlsx)
write.xlsx(Datos[which(Datos$Group == 'Cannabis'), file =  Ejercicio1, sheetName = "Cannabis",  col.names = TRUE, row.names = TRUE, append = FALSE, showNA = TRUE) ])
library(xlsx)
write.xlsx(Datos[which(Datos$Group == 'Cannabis')], file =  Ejercicio1, sheetName = "Cannabis",  col.names = TRUE, row.names = TRUE, append = FALSE, showNA = TRUE)
Datos[which(Datos$Group == 'Cannabis')]
Datos[which(Datos$Group == 'Cannabis')]
Datos
Datos[Datos$id == 1]
Datos[Datos$id == 1]
Datos[Datos$id == 90]
Datos[Datos$id]
Datos[Datos$age = 33]
Datos[Datos$age == 33]
Datos[Datos$Group == 'Cannabis']
Datos[Datos$Group == 'Cannabis',]
write.xlsx(Datos[Datos$Group == 'Cannabis',], file =  Ejercicio1, sheetName = "Cannabis",  col.names = TRUE, row.names = TRUE, append = FALSE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'XTC',], file =  Ejercicio1, sheetName = "XTC",  col.names = TRUE, row.names = TRUE, append = TRUE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'Control',], file =  Ejercicio1, sheetName = "Control",  col.names = TRUE, row.names = TRUE, append = TRUE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'Cannabis',], file =  'Ejercicio1', sheetName = "Cannabis",  col.names = TRUE, row.names = TRUE, append = FALSE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'XTC',], file =  'Ejercicio1', sheetName = "XTC",  col.names = TRUE, row.names = TRUE, append = TRUE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'Control',], file =  'Ejercicio1', sheetName = "Control",  col.names = TRUE, row.names = TRUE, append = TRUE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'Cannabis',], file =  'Ejercicio1.xlsx', sheetName = "Cannabis",  col.names = TRUE, row.names = TRUE, append = FALSE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'Control',], file =  'Ejercicio1.xlsx', sheetName = "Control",  col.names = TRUE, row.names = TRUE, append = TRUE, showNA = TRUE)
write.xlsx(Datos[Datos$Group == 'XTC',], file =  'Ejercicio1.xlsx', sheetName = "XTC",  col.names = TRUE, row.names = TRUE, append = TRUE, showNA = TRUE)
length(Datos, na.rm = TRUE)
datos <- complete.cases(Datos)
datos <- complete.cases(Datos)  # eliminamos filas que contengan algún Na
length(Datos)
length(datos)
datos <- complete.cases(Datos)  # eliminamos filas que contengan algún Na
length(datos)
Datos
datos
datos <- complete.cases(Datos)  # FALSE si la fila que contengan algún Na
length(datos == TRUE)
length(datos[TRUE])
datos <- complete.cases(Datos)  # FALSE si la fila que contengan algún Na
length(datos[TRUE])
table(datos)
table(datos)[TRUE]
table(datos)
media_cannabis_calcaprt
media_cannabis_calcaprt = mean(Datos$calcaprt[which(Datos$Group == 'Cannabis')], na.rm = TRUE))
Datos$calcaprt
Cannabis
Cannabis$calcapld
mean(Cannabis$calcapld, na.rm = TRUE)
Cannabis_calcapld <- mean(Cannabis$calcapld, na.rm = TRUE)
Cannabis_calcapld <- mean(Cannabis$calcapld, na.rm = TRUE)
Cannabis_calcaprt <- mean(Cannabis$calcaprt, na.rm = TRUE)
Cannabis_corcub <- mean(Cannabis$corcub, na.rm = TRUE)
Cannabis_sdmttoco <- mean(Cannabis$sdmttoco, na.rm = TRUE)
Cannabis_waisvocd <- mean(Cannabis$waisvocd, na.rm = TRUE)
XTC_calcapld <- mean(XTC$calcapld, na.rm = TRUE)
XTC_calcaprt <- mean(XTC$calcaprt, na.rm = TRUE)
XTC_corcub <- mean(XTC$corcub, na.rm = TRUE)
XTC_sdmttoco <- mean(XTC$sdmttoco, na.rm = TRUE)
XTC_waisvocd <- mean(XTC$waisvocd, na.rm = TRUE)
Controles_calcapld <- mean(Controles$calcapld, na.rm = TRUE)
Controles_calcapld <- mean(Controles$calcapld, na.rm = TRUE)
Controles_calcaprt <- mean(Controles$calcaprt, na.rm = TRUE)
Controles_corcub <- mean(Controles$corcub, na.rm = TRUE)
Controles_sdmttoco <- mean(Controles$sdmttoco, na.rm = TRUE)
Controles_waisvocd <- mean(Controles$waisvocd, na.rm = TRUE)
MEDIAS <- c (Cannabis_calcapld, Cannabis_calcaprt, Cannabis_corcub, Cannabis_sdmttoco, Cannabis_waisvocd,
XTC_calcapld, XTC_calcaprt, XTC_corcub, XTC_sdmttoco, XTC_waisvocd,
Controles_calcapld, Controles_calcaprt, Controles_corcub, Controles_sdmttoco, Controles_waisvocd)
pie(MEDIAS , labels = LABELS)
LABELS <- c('Cannabis_calcapld', 'Cannabis_calcaprt', 'Cannabis_corcub', 'Cannabis_sdmttoco', 'Cannabis_waisvocd',
'XTC_calcapld', 'XTC_calcaprt', 'XTC_corcub', 'XTC_sdmttoco', 'XTC_waisvocd',
'Controles_calcapld', 'Controles_calcaprt', 'Controles_corcub', 'Controles_sdmttoco', 'Controles_waisvocd')
pie(Prop)
pie(MEDIAS , labels = LABELS)
MEDIAS
pie(MEDIAS , labels = LABELS)
pie(MEDIAS , labels = LABELS)
# Libraries
library(tidyverse)
# Create dataset
data=data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
# ----- This section prepare a dataframe for labels ---- #
# Get the name and the y position of each label
label_data=data
# calculate the ANGLE of the labels
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
label_data$hjust<-ifelse( angle < -90, 1, 0)
# flip angle BY to make them readable
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# ----- ------------------------------------------- ---- #
# Start the plot
p = ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("skyblue", 0.7)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")      # Adjust the margin to make in sort labels are not truncated!
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) +
# Add the labels, using the label_data dataframe that we have created before
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )
p
individual
data
data
# Create dataset
data = data.frame(
id = seq(1,15),
medias = c(Cannabis_calcapld, XTC_calcapld, Controles_calcapld,
Cannabis_calcaprt, XTC_calcaprt, Controles_calcaprt,
Cannabis_corcub, XTC_corcub, Controles_corcub,
Cannabis_sdmttoco, XTC_sdmttoco, Controles_sdmttoco,
Cannabis_waisvocd, XTC_waisvocd, Controles_waisvocd),
grupo = c('Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control'),
variables = c ('calcapld', 'calcapld', 'calcapld',
'calcaprt', 'calcaprt', 'calcaprt',
'corcub', 'corcub', 'corcub',
'sdmttoco', 'sdmttoco', 'sdmttoco',
'waisvocd', 'waisvocd', 'waisvocd')
)
data
library(tidyverse)
label_data = data
ANGLE of the labels
# calculate the ANGLE of the labels
number_of_bar = nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
# flip angle BY to make them readable
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# ----- ------------------------------------------- ---- #
# Start the plot
p = ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("skyblue", 0.7)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")      # Adjust the margin to make in sort labels are not truncated!
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) +
# Add the labels, using the label_data dataframe that we have created before
geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )
p
p = ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("skyblue", 0.7)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")      # Adjust the margin to make in sort labels are not truncated!
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) +
# Add the labels, using the label_data dataframe that we have created before
geom_text(data=label_data, aes(x=id, y=medias+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE )
p
# Libraries
library(tidyverse)
# Create dataset
data = data.frame(
id = seq(1,15),
medias = c(Cannabis_calcapld, XTC_calcapld, Controles_calcapld,
Cannabis_calcaprt, XTC_calcaprt, Controles_calcaprt,
Cannabis_corcub, XTC_corcub, Controles_corcub,
Cannabis_sdmttoco, XTC_sdmttoco, Controles_sdmttoco,
Cannabis_waisvocd, XTC_waisvocd, Controles_waisvocd),
grupo = c('Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control',
'Cannabis', 'XTC', 'Control'),
variables = c ('calcapld', 'calcapld', 'calcapld',
'calcaprt', 'calcaprt', 'calcaprt',
'corcub', 'corcub', 'corcub',
'sdmttoco', 'sdmttoco', 'sdmttoco',
'waisvocd', 'waisvocd', 'waisvocd')
)
# ----- This section prepare a dataframe for labels ---- #
# Get the name and the y position of each label
label_data = data
# calculate the ANGLE of the labels
number_of_bar = nrow(label_data)
angle = 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
label_data$hjust <- ifelse( angle < -90, 1, 0)
# flip angle BY to make them readable
label_data$angle <- ifelse(angle < -90, angle + 180, angle)
# ----- ------------------------------------------- ---- #
# Start the plot
p = ggplot(data, aes(x = as.factor(id), y = value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat = "identity", fill = alpha("skyblue", 0.7)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")      # Adjust the margin to make in sort labels are not truncated!
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) +
# Add the labels, using the label_data dataframe that we have created before
geom_text(data = label_data, aes(x = id, y = medias + 10, label = individual, hjust = hjust), color = "black", fontface = "bold",alpha = 0.6, size = 2.5,
angle = label_data$angle, inherit.aes = FALSE )
p
```{r}
```{r}
label_data
number_of_bar = nrow(label_data)
