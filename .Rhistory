graphics.off()
par(mfrow = c(1:4))
par(mfrow = c(1, 4))
for (i in 1:4){}
for (i in 1:4){}
for (i in 1:4){plot(Y, iris[, i])}
summary(data("iris"))
Iris <- data("iris")
summary(Iris)
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
data("iris")
Iris_setosa = iris[iris == "setosa"]
Iris_setosa
Iris_setosa[1:20, 1]
Iris_setosa[1:50, 1]
plot(vector)
vector
plot(p)
p <- c(1:20)
plot(p)
plot(p, type = "0", col = "blue")     # blue points overlayed by a line
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
p <- c(1:20)
title("ponints", col.main = "red", font.main = 4)
p <- c(2, 3, 4.3, 2, 4, 3, 5, 4)
plot(p)         # just points
title("points", col.main = "red", font.main = 4)
plot(p, type = "o", col = "blue")     # blue points overlayed by a line
title("points", col.main = "red", font.main = 4)
title(main = "Money spend during a week", col.main = "red", font = 4)
graphics.off() # close all the graphics
dinner_spend <- c(10, 10, 10, 15.5, 10, 13, 17)
plot(lunch_spend, type = "o", col = "blue", ylimit = c(0, 6))     # using a y axis in a range (0, 6)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red") # red dashed line and square points
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
lunch_spend <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(lunch_spend, type = "o", col = "blue", ylim = c(0, 6))     # using a y axis in a range (0, 6)
plot(lunch_spend, type = "o", col = "blue")
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, 12))
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
c = 1:10
c
mac(c)
max(c)
plot(lunch_spend, type = "o", col = "blue", ylim = c(1, max(lunch_spend) + 1))
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
length((c))
graphics.off()
plot(lunch_spend, type = "o", col = "blue")     # using a y axis in a range (0, 6)
title("Lunch spend during a week", col.main = "red", font.main = 4)
plot(X)         # just points
plot(X)         # just points
X <- c(10.99, 9, 6.1, 9.50, 6.30, 12, 18)
plot(X)         # just points
plot(X, type = "o", col = "blue")     # blue points overlayed by a line, just that
"testeando los comentarios multiínea en R"
"coment"
/* comentario multilínea en R */
''
'''
aknda
oaneac
wevoan
x <- matrix(1:6, nrow = 2)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
x <- matrix(1:45, nrow = 5)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o')
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o')
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
matplot(x, y, type = 'o', col = "black", lend = "p")
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'o', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
y <- 2*x
matplot(x, y) # just matplot, with no parameters
matplot(x, y, type = 'o', col = "black")
lends <- c("round","butt","square")
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black", lend = lends)
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'c', col = "black")
matplot(x, y, type = 'l', col = "black")
matplot(x, y, type = 'l', col = c("black", "red"))
data("iris")
matplot(iris)
summary(iris)
matplot(iris$Sepal.Length, main = "Sepal Length")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length)
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa"
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris$Sepal.Length, main = "Sepal Length", ylab = "", sub = "of all the set")
matplot(iris[1:50, ]$Sepal.Length, main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, style = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="just for Setosa")
matplot(iris[1:50, ]$Sepal.Length, type = "p", main = "Setosa Sepal Length", ylab = "", sub ="p type")
matplot(iris[1:50, ]$Sepal.Length, type = "n", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="o type")
matplot(iris[1:50, ]$Sepal.Length, type = "b", main = "Setosa Sepal Length", ylab = "", sub ="b type")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend round", lend = "round")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "o", main = "Setosa Sepal Length", ylab = "", sub ="o type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend square", lend = "square")
matplot(iris[1:50, ]$Sepal.Length, type = "c", main = "Setosa Sepal Length", ylab = "", sub ="c type, lend butt", lend = "butt")
plot()
boxplot(x)
x <- c(2, 32, 3, 24, 2, 34, 2, 423, 2, 4, 2, 32, 23, 2, 342)
boxplot(x)
x <- c(2, 4, 2, 3, 4, 5, 7, 4)
boxplot(x)
boxplot(x, horizontal = TRUE)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x)
boxplot(x, varwidth = TRUE) #  make box plot widths proportional to the square root of the sample sizes
boxplot(x, horizontal = TRUE) # make it horizontal
boxplot(iris)
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(nfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
summary(iris)
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par()
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
par(mfrow=c(1,1))
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers")
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
boxplot(iris$Sepal.Length, main = "Sepal Length", sub = "all the flowers")
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
par(mfrow = c(1, 3))
boxplot(iris[1:50, ]$Sepal.Length, main = "Sepal Length", sub = "only Setosa")
boxplot(iris[51:100, ]$Sepal.Length, main = "Sepal Length", sub = "only Versicolor")
boxplot(iris[101:150, ]$Sepal.Length, main = "Sepal Length", sub = "only Virginica")
par(mfrow=c(1,1))     # ugly way to reset 'par'
boxplot(iris$Petal.Length, main = "Petal Length", sub = "all the flowers", col = "red")
g_range == range(0, max(Y))   # returns TRUE TRUE
plot(lunch_spend, type = "o", col = "blue", ylim = g_range, axes = FALSE, ann = FALSE)
lines(dinner_spend, type = "o", pch = 22, lty = 2, col = "red")
title("Money spend in food", col.main = "red", font.main = 4)
days <- c("Mond", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun")
axis(1, at = 1:length(days), lab = days)
axis(2, at = 4 * grange[2])
legth(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26", "2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
plot(dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-07-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
length(dates)
time_between_dates = seq(number_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
time_between_dates
number_dates = length(dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length((time_between_dates))
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
summary(time_between_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates-1){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = dates[i +1] - dates[i]
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[:-1])
summary(time_between_dates[,-1])
summary(time_between_dates[-1])
summary(time_between_dates)
length(time_between_dates)
summary(time_between_dates)
time_between_dates[i] = difftime(dates[i +1], dates[i])
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
length(time_between_dates)
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
for (i in 1:(number_dates-1)){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(dates)
plot(time_between_dates)
plot(time_between_dates, pch = 8)
plot(time_between_dates, pch = 8, col = 'red')
plot(time_between_dates, pch = 8, col = 'red', ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "")
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
boxplot(time_between_dates)
hist(time_between_dates)
hist(time_between_dates, breaks = 10)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20)
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
time_between_dates = seq(number_dates-1)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
number_persons = length(persons)
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", )
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
time_between_dates = seq(number_dates-1)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
Relaciones = date.frame(persons, dates)
Relaciones = date.frame(persons, dates)
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = date.frame(persons, dates)
Relaciones = data.frame(persons, dates)
Relaciones
summary(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
str(Relaciones)
summary(Relaciones)
rownames(Relaciones) <- Relaciones$persons
rownames(Relaciones) <- Relaciones$persons
row.names(Relaciones)
Relaciones = data.frame(persons, dates, time_between_dates)
row.names(Relaciones) <- Relaciones$persons
Relaciones = data.frame(persons, dates, time_between_dates)
summary(Relaciones)
Relaciones
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
time_between_dates = seq(number_dates)
for (i in 1:number_dates){
time_between_dates[i] = difftime(dates[i +1], dates[i])
}
time_between_dates
length(time_between_dates)
summary(time_between_dates[1:(length(time_between_dates)-1)])
Relaciones = data.frame(persons, dates, time_between_dates)
Relaciones
summary(Relaciones)
plot(time_between_dates, pch = 8, col = 'red', main = "Time Between Dates",ylab = "Time between dates", xlab = "Ordered dates")
hist(time_between_dates, breaks = 20, col = "blue", border = "green")
dates = c("2017-04-21", "2017-04-25", "2017-04-28", "2017-05-01", "2017-05-14", "2017-05-21", "2017-05-26", "2017-05-30",
"2017-06-04", "2017-06-23", "2017-06-29", "2017-07-19", "2017-09-22", "2017-10-02", "2017-10-12", "2017-10-26",
"2017-10-27", "2017-11-03", "2017-11-10", "2017-11-24")
persons = c("RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA",
"RLPA", "RLPA", "RLPA", "RLPA", "RLPA", "RLPA")
dates = as.Date(dates)
class(dates)
number_dates = length(dates)
number_persons = length(persons)
if (number_dates == number_persons) {
print("Los tamaños cuadran!!")
}
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv', stringsAsFactors = FALSE)
full_model <- bind_rows(train, test)
str(full_model)
summary(full_model)
print(full_model$Name)
library(RODBC)
install.packages('RODBC')
install.packages("ImportExport")
library(ImportExport)
install.packages('RODBC')
library(RODBC)
library(ODBC)
install.packages('ODBC')
y
bd<-odbcConnectAccess("bd1.mdb")
setwd("~/Documents/Programación/GIT/R-Notebook-s")
read.csv('/Data/Cannabis.csv')
read.csv('\Data\Cannabis.csv')
read.csv('..\Data\Cannabis.csv')
read.csv(file = '..\Data\Cannabis.csv')
Cannabis <- read.csv(file = '../Data/Cannabis.csv')
library(readr)
dataset <- read_csv(NULL)
View(dataset)
Cannabis <- read.csv(file = '/Data/Cannabis.csv')
Cannabis <- read.csv(file = '.../Data/Cannabis.csv')
Cannabis <- read.csv(file = '.../Data/Cannabis.csv')
Cannabis <- read.csv(file = '/Data/Cannabis.csv')
Cannabis <- read.csv(file = '\Data\Cannabis.csv')
Cannabis <- read.csv(file = '...\Data\Cannabis.csv')
Cannabis <- read.csv(file = '.../Data/Cannabis.csv')
Cannabis <- read.csv(file = '../Data/Cannabis.csv')
Cannabis <- read.csv(file = 'Cannabis.csv')
Cannabis <- read.csv(file = '\data\Cannabis.csv')
Cannabis <- read.csv('\data\Cannabis.csv')
Cannabis <- read.csv('\Data\Cannabis.csv')
Cannabis <- read.csv('/Data/Cannabis.csv')
Cannabis <- read.csv('--/Data/Cannabis.csv')
Cannabis <- read.csv('../Data/Cannabis.csv')
Cannabis <- read.csv('Cannabis.csv')
XTC <- read.csv('XTC.csv')
Controles <- read.csv('Controles.csv')
head(Cannabis, 3)
head(XTC, 3)
head(Controles, 3)
head(XTC, 3)
head(Cannabis, 3)
Cannabis <- read.csv('Cannabis.csv')
XTC <- read.csv('XTC.csv')
Controles <- read.csv('Controles.csv')
head(Controles, 3)
Datos <- rbind(temporal, control)
temporal <- rbind.data.frame(XTC, Cannabis)
Datos <- rbind(temporal, control)
temporal <- rbind.data.frame(XTC, Cannabis)
XTC$id< <- NULL
XTC$id< <- null
XTC$id <- NULL
temporal <- rbind.data.frame(XTC, Cannabis)
Datos <- rbind(temporal, control)
Datos <- rbind(temporal, Control)
Datos <- rbind(temporal, Controles)
head(Datos)
Cannabis$Group <- 'Cannabis'
XTC$Group <- 'XTC'
Controles$Group <- 'Control'
XTC$id <- NULL
temporal <- rbind.data.frame(XTC, Cannabis)
Datos <- rbind(temporal, Controles)
head(Datos)
head(Controles, 3)
XTC$id <- NULL
